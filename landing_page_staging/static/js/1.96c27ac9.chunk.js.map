{"version":3,"sources":["components/Team/index.js","components/Team/TeamCard.js","../../src/index.tsx","../node_modules/react-hook-inview/dist/esm/useObserver.js","../node_modules/react-hook-inview/dist/esm/useInView.js"],"names":["Team","useApp","language","width","text","textContext","about","React","useState","view","setView","useInView","threshold","ref","isVisible","useEffect","setTimeout","id","className","title","transitionDuration","delay","visible","list","map","l","i","TeamCard","props","name","image","link","src","alt","href","rel","target","linkedin","style","margin","maxIsVisible","setMaxIsVisible","animated","WrapperTag","ChildTag","count","timeout","clearTimeout","increment","childClassName","transition","transform","opacity","useObserver","callback","root","rootMargin","externalState","useRef","observer","setTarget","useCallback","node","current","unobserve","disconnect","IntersectionObserver","observe","unobserveOnEnter","onEnter","onLeave","inView","entry","state","setState","thresholds","some","t","intersectionRatio","isIntersecting"],"mappings":"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","file":"static/js/1.96c27ac9.chunk.js","sourcesContent":["import React from 'react'\nimport { useApp } from '../../context/Context';\nimport textContext from '../../textContext';\n\n// Hook for checking viewport + animation package\nimport { useInView } from 'react-hook-inview';\nimport SmoothList from 'react-smooth-list';\n\n// Comps\nimport TeamCard from './TeamCard';\n\nexport default function Team() {\n\n\tconst { language, width } = useApp();\n  const text = textContext[language].about;\n\n\tconst [view, setView] = React.useState(false);\n  const [ref, isVisible] = useInView({\n    threshold: width > 900 ? 0.5 : 0,\n  })\n\n  // Trigger setView on viewport enter\n  React.useEffect(() => {\n  \tif (width < 900) {\n  \t\tsetTimeout(() => {\n  \t\t\tisVisible ? setView(true) : setView(false)\n  \t\t}, 500)\n  \t} else {\n  \t\tisVisible ? setView(true) : setView(false)\n  \t}\n  }, [isVisible, width])\n\n\treturn (\n\t\t<div id=\"about\">\n\t\t\t<div ref={ref} className=\"padding textContainer\">\n\t\t\t\t<p className=\"textHeader\">{text.title}</p>\n\t\t\t\t<SmoothList transitionDuration={1000} delay={100} visible={view} className=\"teamContainer\">\n\t\t\t\t\t{\n\t\t\t\t\t\ttext.list.map((l,i) => (\n\t\t\t\t\t\t\t<TeamCard key={i} l={l} />\n\t\t\t\t\t\t))\n\t\t\t\t\t}\n\t\t\t\t</SmoothList>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n","import React from 'react'\nimport { linkedin } from '../../assets/images';\n\nexport default function TeamCard(props) {\n\n\tconst { name, text, image, link } = props.l;\n\n\treturn (\n\t\t<div className=\"teamClass\">\n\t\t\t<img src={image} alt={name} />\n\t\t\t<a href={link} rel=\"noreferrer\" target=\"_blank\">\n\t\t\t\t<p>{name}</p>\n\t\t\t\t<img src={linkedin} alt=\"linkedin\" />\n\t\t\t</a>\n\t\t\t<p style={{margin:0}}>{text}</p>\n\t\t</div>\n\t)\n};","import React, { JSXElementConstructor, PropsWithChildren, useEffect, useState } from \"react\";\n  \ninterface Props {\n    transitionDuration?: number;\n    delay?: number;\n    wrapperTag?: JSXElementConstructor<any>;\n    childTag?: JSXElementConstructor<any>;\n    className?: string;\n    childClassName?: string;\n    visible?: boolean;\n    animated?: boolean;\n    onComplete?: () => any;\n}\n  \nconst SmoothList = (props: PropsWithChildren<Props>) => {\n    const [maxIsVisible, setMaxIsVisible] = useState(0);\n\n    const delay = props.delay || 50,\n          animated = props.animated ?? true,\n          transitionDuration = props.transitionDuration || 400,\n          visible = typeof props.visible === \"undefined\" ? true : props.visible,\n          WrapperTag = props.wrapperTag || \"div\",\n          ChildTag = props.childTag || \"div\";\n  \n    useEffect(() => {\n        let count = React.Children.count(props.children);\n        if (!visible) {\n            // Animate all children out\n            count = 0;\n        }\n\n        if (count == maxIsVisible) {\n            // We're done updating maxVisible, notify when animation is done\n            const timeout = setTimeout(() => {\n                if (props.onComplete) props.onComplete();\n            }, transitionDuration);\n            \n            return () => clearTimeout(timeout)\n        }\n\n        // Move maxIsVisible toward count\n        const increment = count > maxIsVisible ? 1 : -1;\n        const timeout = setTimeout(() => {\n            setMaxIsVisible(maxIsVisible + increment);\n        }, delay);\n        \n        return () => clearTimeout(timeout)\n    }, [\n        React.Children.count(props.children),\n        delay,\n        maxIsVisible,\n        visible,\n        transitionDuration,\n    ])\n  \n    return (\n        <WrapperTag className={props.className}>\n            {animated ? React.Children.map(props.children, (child, i) => {\n                return (\n                    <ChildTag\n                        className={props.childClassName}\n                        style={{\n                        transition: `opacity ${transitionDuration}ms, transform ${transitionDuration}ms`,\n                        transform: maxIsVisible > i ? \"none\" : \"translateY(20px)\",\n                        opacity: maxIsVisible > i ? 1 : 0,\n                        }}\n                    >\n                        {child}\n                    </ChildTag>\n                )\n            }) : props.children}\n        </WrapperTag>\n    )\n}\n\nexport default SmoothList;","import { useRef, useCallback, } from \"react\";\n/**\n * useObserver\n * @param callback IntersectionObserverCallback\n * @param options IntersectionObserverInit\n * @param externalState React.ComponentState[]\n */\nconst useObserver = (callback, { root, rootMargin, threshold } = {}, externalState = []) => {\n    const target = useRef(null);\n    const observer = useRef(null);\n    const setTarget = useCallback((node) => {\n        if (target.current && observer.current) {\n            observer.current.unobserve(target.current);\n            observer.current.disconnect();\n            observer.current = null;\n        }\n        if (node) {\n            observer.current = new IntersectionObserver(callback, { root, rootMargin, threshold });\n            observer.current.observe(node);\n            target.current = node;\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [target, root, rootMargin, threshold, ...externalState]);\n    return setTarget;\n};\nexport default useObserver;\n","import { useEffect, useState, useCallback, } from \"react\";\nimport useObserver from \"./useObserver\";\n/**\n * useInView\n * @param options IntersectionObserverInit\n * @param externalState React.ComponentState[]\n */\nconst useInView = ({ root, rootMargin, threshold, unobserveOnEnter, target, onEnter, onLeave } = {}, externalState = []) => {\n    const [state, setState] = useState({\n        inView: false,\n        entry: null,\n        observer: null,\n    });\n    const callback = useCallback(([entry], observer) => {\n        const inThreshold = observer.thresholds.some((t) => entry.intersectionRatio >= t);\n        const inView = inThreshold && entry.isIntersecting;\n        setState({\n            inView,\n            entry,\n            observer,\n        });\n        // unobserveOnEnter\n        if (inView && unobserveOnEnter) {\n            observer.unobserve(entry.target);\n            observer.disconnect();\n        }\n        // Legacy callbacks\n        if (inView) {\n            onEnter === null || onEnter === void 0 ? void 0 : onEnter(entry, observer);\n        }\n        else {\n            onLeave === null || onLeave === void 0 ? void 0 : onLeave(entry, observer);\n        }\n    }, [onEnter, onLeave, unobserveOnEnter]);\n    const setTarget = useObserver(callback, { root, rootMargin, threshold }, [unobserveOnEnter, ...externalState]);\n    // Legacy 'target' option\n    useEffect(() => {\n        if (target === null || target === void 0 ? void 0 : target.current)\n            setTarget(target.current);\n    }, [target, setTarget]);\n    return [setTarget, state.inView, state.entry, state.observer];\n};\nexport default useInView;\n"],"sourceRoot":""}