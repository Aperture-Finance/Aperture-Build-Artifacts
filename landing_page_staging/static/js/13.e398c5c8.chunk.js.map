{"version":3,"sources":["components/layout/ImgContainer.js","../node_modules/@mui/material/useMediaQuery/useMediaQuery.js"],"names":["ImgContainer","props","margin","images","justify","grid","pc","queryInput","options","theme","useTheme","supportMatchMedia","window","matchMedia","getThemeProps","name","defaultMatches","noSsr","ssrMatchMedia","query","replace","React","matches","match","setMatch","useEnhancedEffect","active","queryList","updateMatch","addListener","removeListener","useMediaQuery","Grid","container","className","style","justifyContent","map","obj","i","item","xs","lg","href","link","target","rel","src","img","width","alt","height"],"mappings":"wPAIe,SAASA,EAAaC,GAAQ,IACnCC,EAAkCD,EAAlCC,OAAQC,EAA0BF,EAA1BE,OAAQC,EAAkBH,EAAlBG,QAASC,EAASJ,EAATI,KAC3BC,ECCO,SAAuBC,GAA0B,IAAdC,EAAc,uDAAJ,GACpDC,EAAQC,cAKRC,EAAsC,qBAAXC,QAAuD,qBAAtBA,OAAOC,WANX,EAY1DC,YAAc,CAChBC,KAAM,mBACNd,MAAOO,EACPC,UAf4D,IAQ5DO,sBAR4D,aAS5DH,kBAT4D,MAS/CF,EAAoBC,OAAOC,WAAa,KATO,MAU5DI,aAV4D,aAW5DC,qBAX4D,MAW5C,KAX4C,EAwB1DC,EAA8B,oBAAfZ,EAA4BA,EAAWE,GAASF,EACnEY,EAAQA,EAAMC,QAAQ,eAAgB,IAzBwB,MA0BpCC,YAAe,WACvC,OAAIJ,GAASN,EACJE,EAAWM,GAAOG,QAGvBJ,EACKA,EAAcC,GAAOG,QAKvBN,KArCqD,mBA0BvDO,EA1BuD,KA0BhDC,EA1BgD,KAyE9D,OAlCAC,aAAkB,WAChB,IAAIC,GAAS,EAEb,GAAKf,EAAL,CAIA,IAAMgB,EAAYd,EAAWM,GAEvBS,EAAc,WAIdF,GACFF,EAASG,EAAUL,UAMvB,OAFAM,IACAD,EAAUE,YAAYD,GACf,WACLF,GAAS,EACTC,EAAUG,eAAeF,OAE1B,CAACT,EAAON,EAAYF,IAUhBY,ED1EIQ,CAAc,sBAEzB,OACE,cAACC,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,UACVC,MAAO,CACLjC,OAAO,GAAD,OAAKA,EAAL,WACNkC,eAAgBhC,GALpB,SAQGD,EAAOkC,KAAI,SAACC,EAAKC,GAAN,OACV,cAACP,EAAA,EAAD,CACEQ,MAAI,EACJC,GAAI,GACJC,GAAIrC,EAEJ6B,UAAS,UAAc,IAAT7B,EAAa,aAAe,cAL5C,SAOE,mBAAGsC,KAAML,EAAIM,KAAMC,OAAO,SAASC,IAAI,aAAvC,SACGxC,EACD,qBAAKyC,IAAKT,EAAIU,IAAKC,MAAOX,EAAIW,MAAOC,IAAG,UAAKZ,EAAIU,OACjD,qBAAKD,IAAKT,EAAIU,IAAKG,OAAQ,GAAID,IAAG,UAAKZ,EAAIU,UANxCT","file":"static/js/13.e398c5c8.chunk.js","sourcesContent":["import React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { useMediaQuery } from \"@mui/material\";\n\nexport default function ImgContainer(props) {\n  const { margin, images, justify, grid } = props;\n  const pc = useMediaQuery('(min-width:1200px)');\n\n  return (\n    <Grid\n      container\n      className=\"imgSort\"\n      style={{\n        margin: `${margin}px auto`,\n        justifyContent: justify,\n      }}\n    >\n      {images.map((obj, i) => (\n        <Grid\n          item\n          xs={12}\n          lg={grid}\n          key={i}\n          className={`${grid === 3 ? \"gridSpread\" : \"gridCenter\"}`}\n        >\n          <a href={obj.link} target=\"_blank\" rel=\"noreferrer\">\n            {pc?\n            <img src={obj.img} width={obj.width} alt={`${obj.img}`} />:\n            <img src={obj.img} height={72} alt={`${obj.img}`} />}\n          </a>\n        </Grid>\n      ))}\n    </Grid>\n  );\n}\n","import * as React from 'react';\nimport { getThemeProps, useThemeWithoutDefault as useTheme } from '@mui/system';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\n/**\n * @deprecated Not used internally. Use `MediaQueryListEvent` from lib.dom.d.ts instead.\n */\n\nexport default function useMediaQuery(queryInput, options = {}) {\n  const theme = useTheme(); // Wait for jsdom to support the match media feature.\n  // All the browsers MUI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n  const {\n    defaultMatches = false,\n    matchMedia = supportMatchMedia ? window.matchMedia : null,\n    noSsr = false,\n    ssrMatchMedia = null\n  } = getThemeProps({\n    name: 'MuiUseMediaQuery',\n    props: options,\n    theme\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['MUI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, '');\n  const [match, setMatch] = React.useState(() => {\n    if (noSsr && supportMatchMedia) {\n      return matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    return defaultMatches;\n  });\n  useEnhancedEffect(() => {\n    let active = true;\n\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n\n    const queryList = matchMedia(query);\n\n    const updateMatch = () => {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui-org/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n\n    updateMatch();\n    queryList.addListener(updateMatch);\n    return () => {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, matchMedia, supportMatchMedia]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query,\n      match\n    });\n  }\n\n  return match;\n}"],"sourceRoot":""}