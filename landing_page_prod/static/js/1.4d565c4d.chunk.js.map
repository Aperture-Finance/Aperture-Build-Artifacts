{"version":3,"sources":["components/Team/index.js","components/Team/TeamCard.js","../../src/index.tsx","../node_modules/react-hook-inview/dist/esm/useObserver.js","../node_modules/react-hook-inview/dist/esm/useInView.js"],"names":["Team","useApp","language","width","text","textContext","about","React","useState","view","setView","useInView","threshold","ref","isVisible","useEffect","setTimeout","id","className","title","transitionDuration","delay","visible","list","map","l","i","TeamCard","props","name","image","link","In","height","viewBox","fill","xmlns","d","onClick","window","open","src","alt","style","opacity","fontWeight","margin","maxIsVisible","setMaxIsVisible","animated","WrapperTag","ChildTag","count","timeout","clearTimeout","increment","childClassName","transition","transform","useObserver","callback","root","rootMargin","externalState","target","useRef","observer","setTarget","useCallback","node","current","unobserve","disconnect","IntersectionObserver","observe","unobserveOnEnter","onEnter","onLeave","inView","entry","state","setState","thresholds","some","t","intersectionRatio","isIntersecting"],"mappings":"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","file":"static/js/1.4d565c4d.chunk.js","sourcesContent":["import React from 'react'\nimport { useApp } from '../../context/Context';\nimport textContext from '../../textContext';\n\n// Hook for checking viewport + animation package\nimport { useInView } from 'react-hook-inview';\nimport SmoothList from 'react-smooth-list';\n\n// Comps\nimport TeamCard from './TeamCard';\n\nexport default function Team() {\n\n\tconst { language, width } = useApp();\n  const text = textContext[language].about;\n\n\tconst [view, setView] = React.useState(false);\n  const [ref, isVisible] = useInView({\n    threshold: width > 900 ? 0.5 : 0,\n  })\n\n  // Trigger setView on viewport enter\n  React.useEffect(() => {\n  \tif (width < 900) {\n  \t\tsetTimeout(() => {\n  \t\t\tisVisible ? setView(true) : setView(false)\n  \t\t}, 500)\n  \t} else {\n  \t\tisVisible ? setView(true) : setView(false)\n  \t}\n  }, [isVisible, width])\n\n\treturn (\n\t\t<div id=\"about\">\n\t\t\t<div ref={ref} className=\"padding textContainer\">\n\t\t\t\t<p className=\"textHeader\">{text.title}</p>\n\t\t\t\t<SmoothList transitionDuration={1000} delay={100} visible={view} className=\"teamContainer\">\n\t\t\t\t\t{\n\t\t\t\t\t\ttext.list.map((l,i) => (\n\t\t\t\t\t\t\t<TeamCard key={i} l={l} />\n\t\t\t\t\t\t))\n\t\t\t\t\t}\n\t\t\t\t</SmoothList>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n","\nexport default function TeamCard(props) {\n\n\tconst { name, text, image, link } = props.l;\n\n\tconst In = () => (\n\t\t<svg width=\"61\" height=\"59\" viewBox=\"0 0 61 59\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n\t\t\t<path d=\"M13.86 19.4967V58.3723H0.754557V19.4967H13.86ZM14.694 7.49269C14.7205 9.40182 14.052 10.9971 12.6885 12.2786C11.325 13.5601 9.53125 14.2008 7.30729 14.2008H7.22786C5.05686 14.2008 3.30946 13.5601 1.98568 12.2786C0.661892 10.9971 0 9.40182 0 7.49269C0 5.5574 0.681749 3.95556 2.04525 2.68717C3.40875 1.41877 5.18924 0.784576 7.38672 0.784576C9.5842 0.784576 11.3448 1.41877 12.6686 2.68717C13.9924 3.95556 14.6675 5.5574 14.694 7.49269ZM61 36.0904V58.3723H47.9342V37.5811C47.9342 34.8351 47.3981 32.6841 46.3258 31.128C45.2536 29.5719 43.579 28.7939 41.3021 28.7939C39.6341 28.7939 38.2375 29.245 37.1123 30.1473C35.9871 31.0495 35.1465 32.1676 34.5905 33.5013C34.2993 34.2859 34.1536 35.3451 34.1536 36.6789V58.3723H21.0879C21.1408 47.9375 21.1673 39.4772 21.1673 32.9914C21.1673 26.5055 21.1541 22.635 21.1276 21.3797L21.0879 19.4967H34.1536V25.1456H34.0742C34.6037 24.3087 35.1465 23.5765 35.7025 22.9488C36.2585 22.3211 37.0064 21.6412 37.9463 20.9089C38.8862 20.1766 40.0379 19.6078 41.4014 19.2025C42.7649 18.7971 44.2806 18.5944 45.9486 18.5944C50.4759 18.5944 54.1163 20.0786 56.8698 23.0469C59.6233 26.0152 61 30.363 61 36.0904Z\" fill=\"white\" />\n\t\t</svg>\n\t)\n\treturn (\n\t\t<div className=\"teamClass\">\n\t\t\t<div className=\"teamclass-img\" onClick={() => window.open(link, '_blank', 'noopener,noreferrer')}>\n\t\t\t\t<img src={image} alt={name} />\n\t\t\t\t<span className=\"teamclass-in\"><In /></span>\n\t\t\t</div>\n\t\t\t<p style={{opacity:'1', fontWeight:'600'}}>{name}</p>\n\t\t\t<p style={{ margin: 0 }}>{text}</p>\n\t\t</div>\n\t)\n};","import React, { JSXElementConstructor, PropsWithChildren, useEffect, useState } from \"react\";\n  \ninterface Props {\n    transitionDuration?: number;\n    delay?: number;\n    wrapperTag?: JSXElementConstructor<any>;\n    childTag?: JSXElementConstructor<any>;\n    className?: string;\n    childClassName?: string;\n    visible?: boolean;\n    animated?: boolean;\n    onComplete?: () => any;\n}\n  \nconst SmoothList = (props: PropsWithChildren<Props>) => {\n    const [maxIsVisible, setMaxIsVisible] = useState(0);\n\n    const delay = props.delay || 50,\n          animated = props.animated ?? true,\n          transitionDuration = props.transitionDuration || 400,\n          visible = typeof props.visible === \"undefined\" ? true : props.visible,\n          WrapperTag = props.wrapperTag || \"div\",\n          ChildTag = props.childTag || \"div\";\n  \n    useEffect(() => {\n        let count = React.Children.count(props.children);\n        if (!visible) {\n            // Animate all children out\n            count = 0;\n        }\n\n        if (count == maxIsVisible) {\n            // We're done updating maxVisible, notify when animation is done\n            const timeout = setTimeout(() => {\n                if (props.onComplete) props.onComplete();\n            }, transitionDuration);\n            \n            return () => clearTimeout(timeout)\n        }\n\n        // Move maxIsVisible toward count\n        const increment = count > maxIsVisible ? 1 : -1;\n        const timeout = setTimeout(() => {\n            setMaxIsVisible(maxIsVisible + increment);\n        }, delay);\n        \n        return () => clearTimeout(timeout)\n    }, [\n        React.Children.count(props.children),\n        delay,\n        maxIsVisible,\n        visible,\n        transitionDuration,\n    ])\n  \n    return (\n        <WrapperTag className={props.className}>\n            {animated ? React.Children.map(props.children, (child, i) => {\n                return (\n                    <ChildTag\n                        className={props.childClassName}\n                        style={{\n                        transition: `opacity ${transitionDuration}ms, transform ${transitionDuration}ms`,\n                        transform: maxIsVisible > i ? \"none\" : \"translateY(20px)\",\n                        opacity: maxIsVisible > i ? 1 : 0,\n                        }}\n                    >\n                        {child}\n                    </ChildTag>\n                )\n            }) : props.children}\n        </WrapperTag>\n    )\n}\n\nexport default SmoothList;","import { useRef, useCallback, } from \"react\";\n/**\n * useObserver\n * @param callback IntersectionObserverCallback\n * @param options IntersectionObserverInit\n * @param externalState React.ComponentState[]\n */\nconst useObserver = (callback, { root, rootMargin, threshold } = {}, externalState = []) => {\n    const target = useRef(null);\n    const observer = useRef(null);\n    const setTarget = useCallback((node) => {\n        if (target.current && observer.current) {\n            observer.current.unobserve(target.current);\n            observer.current.disconnect();\n            observer.current = null;\n        }\n        if (node) {\n            observer.current = new IntersectionObserver(callback, { root, rootMargin, threshold });\n            observer.current.observe(node);\n            target.current = node;\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [target, root, rootMargin, threshold, ...externalState]);\n    return setTarget;\n};\nexport default useObserver;\n","import { useEffect, useState, useCallback, } from \"react\";\nimport useObserver from \"./useObserver\";\n/**\n * useInView\n * @param options IntersectionObserverInit\n * @param externalState React.ComponentState[]\n */\nconst useInView = ({ root, rootMargin, threshold, unobserveOnEnter, target, onEnter, onLeave } = {}, externalState = []) => {\n    const [state, setState] = useState({\n        inView: false,\n        entry: null,\n        observer: null,\n    });\n    const callback = useCallback(([entry], observer) => {\n        const inThreshold = observer.thresholds.some((t) => entry.intersectionRatio >= t);\n        const inView = inThreshold && entry.isIntersecting;\n        setState({\n            inView,\n            entry,\n            observer,\n        });\n        // unobserveOnEnter\n        if (inView && unobserveOnEnter) {\n            observer.unobserve(entry.target);\n            observer.disconnect();\n        }\n        // Legacy callbacks\n        if (inView) {\n            onEnter === null || onEnter === void 0 ? void 0 : onEnter(entry, observer);\n        }\n        else {\n            onLeave === null || onLeave === void 0 ? void 0 : onLeave(entry, observer);\n        }\n    }, [onEnter, onLeave, unobserveOnEnter]);\n    const setTarget = useObserver(callback, { root, rootMargin, threshold }, [unobserveOnEnter, ...externalState]);\n    // Legacy 'target' option\n    useEffect(() => {\n        if (target === null || target === void 0 ? void 0 : target.current)\n            setTarget(target.current);\n    }, [target, setTarget]);\n    return [setTarget, state.inView, state.entry, state.observer];\n};\nexport default useInView;\n"],"sourceRoot":""}