{"version":3,"sources":["assets/images/strategis/blocks.svg","assets/images/strategis/coins.svg","assets/images/strategis/uniswap.svg","components/Strategy/index.js","../../src/index.tsx","../node_modules/react-hook-inview/dist/esm/useObserver.js","../node_modules/react-hook-inview/dist/esm/useInView.js"],"names":["Card","styled","div","Title","Body","Icon","img","Strategy","useApp","language","width","text","useToken","anchor","textContext","productHilight","React","useState","view","setView","useInView","threshold","ref","isVisible","icons","uniswap","blocks","coins","useEffect","setTimeout","id","className","title","transitionDuration","visible","list","map","l","i","body","src","alt","props","maxIsVisible","setMaxIsVisible","delay","animated","WrapperTag","ChildTag","count","timeout","clearTimeout","increment","childClassName","style","transition","transform","opacity","useObserver","callback","root","rootMargin","externalState","target","useRef","observer","setTarget","useCallback","node","current","unobserve","disconnect","IntersectionObserver","observe","unobserveOnEnter","onEnter","onLeave","inView","entry","state","setState","thresholds","some","t","intersectionRatio","isIntersecting"],"mappings":"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","file":"static/js/3.5fcca65f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/blocks.245f2114.svg\";","export default __webpack_public_path__ + \"static/media/coins.72d0ac8a.svg\";","export default __webpack_public_path__ + \"static/media/uniswap.06f497fb.svg\";","import React from \"react\";\nimport { useApp } from \"../../context/Context\";\nimport { useToken } from \"../../context/TokenContext\";\nimport textContext from \"../../textContext\";\nimport styled from \"styled-components\";\nimport { blocks, coins, uniswap } from \"../../assets/images/strategis\";\nimport { useInView } from \"react-hook-inview\";\nimport SmoothList from \"react-smooth-list\";\n\nconst Card = styled.div`\n  background: #212030;\n  backdrop-filter: blur(10px);\n  border-radius: 12px;\n  width: 272px;\n  height: 355px;\n  padding: 24px;\n  position: relative;\n`;\nconst Title = styled.div`\n  font-family: \"Poppins\";\n  font-style: normal;\n  font-weight: 600;\n  font-size: 24px;\n  line-height: 36px;\n  color: #ffffff;\n  white-space: nowrap;\n`;\n\nconst Body = styled.div`\n  font-family: \"Poppins\";\n  font-style: normal;\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 21px;\n  color: #ffffff;\n  margin-top: 8px;\n`;\n\nconst Icon = styled.img`\n  position: absolute;\n  left: 0px;\n  bottom: 0px;\n  border-bottom-left-radius: 12px;\n`;\n\nexport default function Strategy() {\n  const { language, width } = useApp();\n  const { anchor } = useToken();\n  const text = textContext[language].productHilight;\n  const [view, setView] = React.useState(false);\n  const [ref, isVisible] = useInView({\n    threshold: width > 900 ? 0.5 : 0,\n  });\n  const icons = [uniswap, blocks, coins];\n  // Trigger setView on viewport enter\n  React.useEffect(() => {\n    if (width < 900) {\n      setTimeout(() => {\n        isVisible ? setView(true) : setView(false);\n      }, 500);\n    } else {\n      isVisible ? setView(true) : setView(false);\n    }\n  }, [isVisible, width]);\n\n  return (\n    <div id=\"strategy\">\n      <div ref={ref} className=\"padding\">\n        <p className=\"textHeader\">{text.title}</p>\n\n        <SmoothList\n          transitionDuration={1000}\n          visible={view}\n          className=\"cardContainer\"\n        >\n          {text.list.map((l, i) => (\n            <Card key={i}>\n              <Title>{l.title}</Title>\n              <Body>{l.body}</Body>\n              <Icon src={icons[i]} alt=\"\" />\n            </Card>\n          ))}\n        </SmoothList>\n      </div>\n    </div>\n  );\n}\n","import React, { JSXElementConstructor, PropsWithChildren, useEffect, useState } from \"react\";\n  \ninterface Props {\n    transitionDuration?: number;\n    delay?: number;\n    wrapperTag?: JSXElementConstructor<any>;\n    childTag?: JSXElementConstructor<any>;\n    className?: string;\n    childClassName?: string;\n    visible?: boolean;\n    animated?: boolean;\n    onComplete?: () => any;\n}\n  \nconst SmoothList = (props: PropsWithChildren<Props>) => {\n    const [maxIsVisible, setMaxIsVisible] = useState(0);\n\n    const delay = props.delay || 50,\n          animated = props.animated ?? true,\n          transitionDuration = props.transitionDuration || 400,\n          visible = typeof props.visible === \"undefined\" ? true : props.visible,\n          WrapperTag = props.wrapperTag || \"div\",\n          ChildTag = props.childTag || \"div\";\n  \n    useEffect(() => {\n        let count = React.Children.count(props.children);\n        if (!visible) {\n            // Animate all children out\n            count = 0;\n        }\n\n        if (count == maxIsVisible) {\n            // We're done updating maxVisible, notify when animation is done\n            const timeout = setTimeout(() => {\n                if (props.onComplete) props.onComplete();\n            }, transitionDuration);\n            \n            return () => clearTimeout(timeout)\n        }\n\n        // Move maxIsVisible toward count\n        const increment = count > maxIsVisible ? 1 : -1;\n        const timeout = setTimeout(() => {\n            setMaxIsVisible(maxIsVisible + increment);\n        }, delay);\n        \n        return () => clearTimeout(timeout)\n    }, [\n        React.Children.count(props.children),\n        delay,\n        maxIsVisible,\n        visible,\n        transitionDuration,\n    ])\n  \n    return (\n        <WrapperTag className={props.className}>\n            {animated ? React.Children.map(props.children, (child, i) => {\n                return (\n                    <ChildTag\n                        className={props.childClassName}\n                        style={{\n                        transition: `opacity ${transitionDuration}ms, transform ${transitionDuration}ms`,\n                        transform: maxIsVisible > i ? \"none\" : \"translateY(20px)\",\n                        opacity: maxIsVisible > i ? 1 : 0,\n                        }}\n                    >\n                        {child}\n                    </ChildTag>\n                )\n            }) : props.children}\n        </WrapperTag>\n    )\n}\n\nexport default SmoothList;","import { useRef, useCallback, } from \"react\";\n/**\n * useObserver\n * @param callback IntersectionObserverCallback\n * @param options IntersectionObserverInit\n * @param externalState React.ComponentState[]\n */\nconst useObserver = (callback, { root, rootMargin, threshold } = {}, externalState = []) => {\n    const target = useRef(null);\n    const observer = useRef(null);\n    const setTarget = useCallback((node) => {\n        if (target.current && observer.current) {\n            observer.current.unobserve(target.current);\n            observer.current.disconnect();\n            observer.current = null;\n        }\n        if (node) {\n            observer.current = new IntersectionObserver(callback, { root, rootMargin, threshold });\n            observer.current.observe(node);\n            target.current = node;\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [target, root, rootMargin, threshold, ...externalState]);\n    return setTarget;\n};\nexport default useObserver;\n","import { useEffect, useState, useCallback, } from \"react\";\nimport useObserver from \"./useObserver\";\n/**\n * useInView\n * @param options IntersectionObserverInit\n * @param externalState React.ComponentState[]\n */\nconst useInView = ({ root, rootMargin, threshold, unobserveOnEnter, target, onEnter, onLeave } = {}, externalState = []) => {\n    const [state, setState] = useState({\n        inView: false,\n        entry: null,\n        observer: null,\n    });\n    const callback = useCallback(([entry], observer) => {\n        const inThreshold = observer.thresholds.some((t) => entry.intersectionRatio >= t);\n        const inView = inThreshold && entry.isIntersecting;\n        setState({\n            inView,\n            entry,\n            observer,\n        });\n        // unobserveOnEnter\n        if (inView && unobserveOnEnter) {\n            observer.unobserve(entry.target);\n            observer.disconnect();\n        }\n        // Legacy callbacks\n        if (inView) {\n            onEnter === null || onEnter === void 0 ? void 0 : onEnter(entry, observer);\n        }\n        else {\n            onLeave === null || onLeave === void 0 ? void 0 : onLeave(entry, observer);\n        }\n    }, [onEnter, onLeave, unobserveOnEnter]);\n    const setTarget = useObserver(callback, { root, rootMargin, threshold }, [unobserveOnEnter, ...externalState]);\n    // Legacy 'target' option\n    useEffect(() => {\n        if (target === null || target === void 0 ? void 0 : target.current)\n            setTarget(target.current);\n    }, [target, setTarget]);\n    return [setTarget, state.inView, state.entry, state.observer];\n};\nexport default useInView;\n"],"sourceRoot":""}