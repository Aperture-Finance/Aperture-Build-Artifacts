{"version":3,"sources":["components/Offering/index.js","components/Offering/OfferingList.js","../../src/index.tsx","../node_modules/react-hook-inview/dist/esm/useObserver.js","../node_modules/react-hook-inview/dist/esm/useInView.js"],"names":["Offering","useApp","language","width","text","textContext","offering","React","useState","view","setView","useInView","threshold","ref","isVisible","useEffect","setTimeout","id","className","title","transitionDuration","delay","visible","list","map","l","i","OfferingList","props","header","subtitle","body","image","color","container","item","xs","md","style","src","alt","maxIsVisible","setMaxIsVisible","animated","WrapperTag","ChildTag","count","timeout","clearTimeout","increment","childClassName","transition","transform","opacity","useObserver","callback","root","rootMargin","externalState","target","useRef","observer","setTarget","useCallback","node","current","unobserve","disconnect","IntersectionObserver","observe","unobserveOnEnter","onEnter","onLeave","inView","entry","state","setState","thresholds","some","t","intersectionRatio","isIntersecting"],"mappings":"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","file":"static/js/0.9d6ec1df.chunk.js","sourcesContent":["import React from 'react'\nimport { useApp } from '../../context/Context';\nimport textContext from '../../textContext';\n\n// Hook for checking viewport + animation package\nimport { useInView } from 'react-hook-inview';\nimport SmoothList from 'react-smooth-list';\n\n// Comps\nimport OfferingList from './OfferingList';\n\nexport default function Offering() {\n\n\tconst { language, width } = useApp();\n  const text = textContext[language].offering;\n\n\tconst [view, setView] = React.useState(false);\n  const [ref, isVisible] = useInView({\n    threshold: width > 900 ? 0.5 : 0,\n  })\n\n  // Trigger setView on viewport enter\n  React.useEffect(() => {\n  \tif (width < 900) {\n  \t\tsetTimeout(() => {\n  \t\t\tisVisible ? setView(true) : setView(false)\n  \t\t}, 500)\n  \t} else {\n  \t\tisVisible ? setView(true) : setView(false)\n  \t}\n  }, [isVisible, width])\n\n\treturn (\n\t\t<div ref={ref} id=\"offering\">\n\t\t\t<div className=\"padding textContainer\">\n\t\t\t\t<p className=\"textHeader\">{text.title}</p>\n\t\t\t\t<SmoothList transitionDuration={1000} delay={100} visible={view}>\n\t\t\t\t\t{\n\t\t\t\t\t\ttext.list.map((l,i) => (\n\t\t\t\t\t\t\t<OfferingList width={width} key={i} l={l} />\n\t\t\t\t\t\t))\n\t\t\t\t\t}\n\t\t\t\t</SmoothList>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n","import React from \"react\";\nimport Grid from \"@mui/material/Grid\";\n\nexport default function OfferingList(props) {\n  const { header, subtitle, body, image, color } = props.l;\n\n  return (\n    <Grid container className=\"offeringClass\">\n      <Grid className=\"grid\" item xs={12} md={6}>\n        <div className=\"paddingRight\">\n        <h5 className={!color ? \"gradientClass\" : \"\"} style={{ color: color }}>\n          {header}\n        </h5>\n        <h2>{subtitle}</h2>\n        {props.width > 900 && <p>{body}</p>}\n        </div>\n      </Grid>\n\n      <Grid className=\"grid\" item xs={12} md={6}>\n        <img src={image} alt={header} />\n        {props.width < 900 && <p>{body}</p>}\n      </Grid>\n    </Grid>\n  );\n}\n","import React, { JSXElementConstructor, PropsWithChildren, useEffect, useState } from \"react\";\n  \ninterface Props {\n    transitionDuration?: number;\n    delay?: number;\n    wrapperTag?: JSXElementConstructor<any>;\n    childTag?: JSXElementConstructor<any>;\n    className?: string;\n    childClassName?: string;\n    visible?: boolean;\n    animated?: boolean;\n    onComplete?: () => any;\n}\n  \nconst SmoothList = (props: PropsWithChildren<Props>) => {\n    const [maxIsVisible, setMaxIsVisible] = useState(0);\n\n    const delay = props.delay || 50,\n          animated = props.animated ?? true,\n          transitionDuration = props.transitionDuration || 400,\n          visible = typeof props.visible === \"undefined\" ? true : props.visible,\n          WrapperTag = props.wrapperTag || \"div\",\n          ChildTag = props.childTag || \"div\";\n  \n    useEffect(() => {\n        let count = React.Children.count(props.children);\n        if (!visible) {\n            // Animate all children out\n            count = 0;\n        }\n\n        if (count == maxIsVisible) {\n            // We're done updating maxVisible, notify when animation is done\n            const timeout = setTimeout(() => {\n                if (props.onComplete) props.onComplete();\n            }, transitionDuration);\n            \n            return () => clearTimeout(timeout)\n        }\n\n        // Move maxIsVisible toward count\n        const increment = count > maxIsVisible ? 1 : -1;\n        const timeout = setTimeout(() => {\n            setMaxIsVisible(maxIsVisible + increment);\n        }, delay);\n        \n        return () => clearTimeout(timeout)\n    }, [\n        React.Children.count(props.children),\n        delay,\n        maxIsVisible,\n        visible,\n        transitionDuration,\n    ])\n  \n    return (\n        <WrapperTag className={props.className}>\n            {animated ? React.Children.map(props.children, (child, i) => {\n                return (\n                    <ChildTag\n                        className={props.childClassName}\n                        style={{\n                        transition: `opacity ${transitionDuration}ms, transform ${transitionDuration}ms`,\n                        transform: maxIsVisible > i ? \"none\" : \"translateY(20px)\",\n                        opacity: maxIsVisible > i ? 1 : 0,\n                        }}\n                    >\n                        {child}\n                    </ChildTag>\n                )\n            }) : props.children}\n        </WrapperTag>\n    )\n}\n\nexport default SmoothList;","import { useRef, useCallback, } from \"react\";\n/**\n * useObserver\n * @param callback IntersectionObserverCallback\n * @param options IntersectionObserverInit\n * @param externalState React.ComponentState[]\n */\nconst useObserver = (callback, { root, rootMargin, threshold } = {}, externalState = []) => {\n    const target = useRef(null);\n    const observer = useRef(null);\n    const setTarget = useCallback((node) => {\n        if (target.current && observer.current) {\n            observer.current.unobserve(target.current);\n            observer.current.disconnect();\n            observer.current = null;\n        }\n        if (node) {\n            observer.current = new IntersectionObserver(callback, { root, rootMargin, threshold });\n            observer.current.observe(node);\n            target.current = node;\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [target, root, rootMargin, threshold, ...externalState]);\n    return setTarget;\n};\nexport default useObserver;\n","import { useEffect, useState, useCallback, } from \"react\";\nimport useObserver from \"./useObserver\";\n/**\n * useInView\n * @param options IntersectionObserverInit\n * @param externalState React.ComponentState[]\n */\nconst useInView = ({ root, rootMargin, threshold, unobserveOnEnter, target, onEnter, onLeave } = {}, externalState = []) => {\n    const [state, setState] = useState({\n        inView: false,\n        entry: null,\n        observer: null,\n    });\n    const callback = useCallback(([entry], observer) => {\n        const inThreshold = observer.thresholds.some((t) => entry.intersectionRatio >= t);\n        const inView = inThreshold && entry.isIntersecting;\n        setState({\n            inView,\n            entry,\n            observer,\n        });\n        // unobserveOnEnter\n        if (inView && unobserveOnEnter) {\n            observer.unobserve(entry.target);\n            observer.disconnect();\n        }\n        // Legacy callbacks\n        if (inView) {\n            onEnter === null || onEnter === void 0 ? void 0 : onEnter(entry, observer);\n        }\n        else {\n            onLeave === null || onLeave === void 0 ? void 0 : onLeave(entry, observer);\n        }\n    }, [onEnter, onLeave, unobserveOnEnter]);\n    const setTarget = useObserver(callback, { root, rootMargin, threshold }, [unobserveOnEnter, ...externalState]);\n    // Legacy 'target' option\n    useEffect(() => {\n        if (target === null || target === void 0 ? void 0 : target.current)\n            setTarget(target.current);\n    }, [target, setTarget]);\n    return [setTarget, state.inView, state.entry, state.observer];\n};\nexport default useInView;\n"],"sourceRoot":""}